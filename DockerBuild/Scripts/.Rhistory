instpath <- "C:/Users/tva10kg/OneDrive - The Royal Botanic Gardens, Kew/Documents/Projects/PreliminaryGenomeAnal/Scripts/Docker/DockerRun/Output/RHW620_downsB/ABySS_RHW620_downsB/Trimmomatic_hard"
library(stringr)
library(readr)
####
# checking if a logfile can be found coming from Abyss
####
elogfile <- list.files(path, pattern = "elog")
instpath <- "C:/Users/tva10kg/OneDrive - The Royal Botanic Gardens, Kew/Documents/Projects/PreliminaryGenomeAnal/Scripts/Docker/DockerRun/Output/RHW620_downsB/ABySS_RHW620_downsB/Trimmomatic_hard"
path <- instpath
####
# checking if a logfile can be found coming from Abyss
####
elogfile <- list.files(path, pattern = "elog")
if(length(elogfile) == 1){
elog <- readLines(paste0(path, "/", elogfile))
}
if(length(elogfile) > 1){
warning("More then one logfile was provided! No FPR value will be summarised.")
}
if(length(elogfile) == 0){
warning("No logfile was provided! No FPR value will be summarised.")
}
idx <- which(str_detect(elog, pattern = "FPR"))
# extract the second rows as well
idx2 <- idx + 1
FPR <- elog[idx]
kmer <- elog[idx2]
kmer
FPR
FPR <- str_extract(FPR, pattern = "[0-9]+\\..*%|[0-9]+.*%")
FPR
kmer <- str_extract(kmer, pattern = "[0-9]+")
kmer
idx <- which(str_detect(elog, pattern = "\tFPR"))
# extract the second rows as well
idx2 <- idx + 1
FPR <- elog[idx]
kmer <- elog[idx2]
FPR <- str_extract(FPR, pattern = "[0-9]+\\..*%|[0-9]+.*%")
kmer <- str_extract(kmer, pattern = "[0-9]+")
best_k <- kmer[1]
best_k
####
# checking if a comparison file can be found coming from abyss-fac
####
compfile <- list.files(path, pattern = "comparison")
if(length(compfile) == 1){
comp_df <- read_tsv(paste0(path, "/", compfile))
}
if(length(compfile) > 1){
stop("More then one ABySS kmer size comparison file was found!")
}
if(length(compfile) == 0){
stop("No ABySS kmer size comparison file was found!")
}
####
# checking if a comparison file can be found coming from abyss-fac
####
compfile <- list.files(path, pattern = "comparison")
if(length(compfile) == 1){
comp_df <- read_tsv(paste0(path, "/", compfile), show_col_types = FALSE)
}
if(length(compfile) > 1){
stop("More then one ABySS kmer size comparison file was found!")
}
if(length(compfile) == 0){
stop("No ABySS kmer size comparison file was found!")
}
######
kmer_comp <- str_extract(comp_df$name, "kmer_\\d+_kc_\\d+")
kmer_comp2 <- str_extract(kmer_comp, "kmer_\\d+")
comp_df$kmer <- str_extract(kmer_comp2, "\\d+")
kc <- str_extract(kmer_comp, "kc_\\d+")
comp_df$kc <- str_extract(kc, "\\d+")
comp_df$FPR <- FPR[match(comp_df$kmer, kmer)]
comp_df$KmerGenieBest <- NA
comp_df$KmerGenieBest[comp_df$kmer %in% best_k] <- "Best K"
comp_df$Best_N50 <- NA
comp_df$Best_N50[which.max(comp_df$N50)] <- "Best N50"
comp_df <- comp_df[order(as.numeric(comp_df$kmer)),]
comp_df <- comp_df[,c(12:16,1:11)]
View(comp_df)
instpath <- "C:/Users/tva10kg/OneDrive - The Royal Botanic Gardens, Kew/Documents/Projects/PreliminaryGenomeAnal/Scripts/Docker/DockerRun/Output/RHW620_downsB/ABySS_RHW620_downsB/Trimmomatic_hard"
path <- instpath
elogfile <- list.files(path, pattern = "elog")
if(length(elogfile) == 1){
elog <- readLines(paste0(path, "/", elogfile))
}
if(length(elogfile) > 1){
warning("More then one logfile was provided! No FPR value will be summarised.")
}
if(length(elogfile) == 0){
warning("No logfile was provided! No FPR value will be summarised.")
}
######
idx <- which(str_detect(elog, pattern = "\tFPR"))
# extract the second rows as well
idx2 <- idx + 1
FPR <- elog[idx]
kmer <- elog[idx2]
FPR <- str_extract(FPR, pattern = "[0-9]+\\..*%|[0-9]+.*%")
kmer <- str_extract(kmer, pattern = "[0-9]+")
best_k <- kmer[1]
####
# checking if a comparison file can be found coming from abyss-fac
####
compfile <- list.files(path, pattern = "comparison")
if(length(compfile) == 1){
comp_df <- read_tsv(paste0(path, "/", compfile), show_col_types = FALSE)
}
if(length(compfile) > 1){
stop("More then one ABySS kmer size comparison file was found!")
}
if(length(compfile) == 0){
stop("No ABySS kmer size comparison file was found!")
}
######
kmer_comp <- str_extract(comp_df$name, "kmer_\\d+_kc_\\d+")
kmer_comp2 <- str_extract(kmer_comp, "kmer_\\d+")
comp_df$kmer <- str_extract(kmer_comp2, "\\d+")
kc <- str_extract(kmer_comp, "kc_\\d+")
comp_df$kc <- str_extract(kc, "\\d+")
comp_df$FPR <- FPR[match(comp_df$kmer, kmer)]
comp_df$KmerGenieBest <- NA
comp_df$KmerGenieBest[comp_df$kmer %in% best_k] <- "Best K"
comp_df$Best_N50 <- NA
comp_df$Best_N50[which.max(comp_df$N50)] <- "Best N50"
comp_df <- comp_df[order(as.numeric(comp_df$kmer)),]
comp_df <- comp_df[,c(12:16,1:11)]
### write out summary tsv
file_out <- str_c(str_remove(compfile, pattern = "_comparison.*"), "_final_summary.tsv")
View(comp_df)
which(comp_df$sum > 0)
comp_df$name[idx]
idx <- which(comp_df$sum > 0)
comp_df$name[idx]
scaffolds <- comp_df$name[idx]
### write out summary tsv
file_out <- str_c(str_remove(compfile, pattern = "_comparison.*"), "scaffolds_to_anal.txt")
file_out
### write out summary tsv
file_out <- str_c(str_remove(compfile, pattern = "_comparison.*"), "_scaffolds_to_anal.txt")
file_out
scaffolds
write_lines(scaffolds, file = paste0(path, "/", file_out))
instpath <- "C:/Users/tva10kg/OneDrive - The Royal Botanic Gardens, Kew/Documents/Projects/PreliminaryGenomeAnal/Scripts/Docker/DockerRun/Output/RHW620_downsB/ABySS_RHW620_downsB/Trimmomatic_hard"
path <- instpath
elogfile <- list.files(path, pattern = "elog")
if(length(elogfile) == 1){
elog <- readLines(paste0(path, "/", elogfile))
}
if(length(elogfile) > 1){
warning("More then one logfile was provided! No FPR value will be summarised.")
}
if(length(elogfile) == 0){
warning("No logfile was provided! No FPR value will be summarised.")
}
######
idx <- which(str_detect(elog, pattern = "\tFPR"))
library(stringr)
library(readr)
elogfile <- list.files(path, pattern = "elog")
if(length(elogfile) == 1){
elog <- readLines(paste0(path, "/", elogfile))
}
if(length(elogfile) > 1){
warning("More then one logfile was provided! No FPR value will be summarised.")
}
if(length(elogfile) == 0){
warning("No logfile was provided! No FPR value will be summarised.")
}
######
idx <- which(str_detect(elog, pattern = "\tFPR"))
# extract the second rows as well
idx2 <- idx + 1
FPR <- elog[idx]
kmer <- elog[idx2]
FPR <- str_extract(FPR, pattern = "[0-9]+\\..*%|[0-9]+.*%")
kmer <- str_extract(kmer, pattern = "[0-9]+")
best_k <- kmer[1]
####
# checking if a comparison file can be found coming from abyss-fac
####
compfile <- list.files(path, pattern = "comparison")
if(length(compfile) == 1){
comp_df <- read_tsv(paste0(path, "/", compfile), show_col_types = FALSE)
}
if(length(compfile) > 1){
stop("More then one ABySS kmer size comparison file was found!")
}
if(length(compfile) == 0){
stop("No ABySS kmer size comparison file was found!")
}
######
kmer_comp <- str_extract(comp_df$name, "kmer_\\d+_kc_\\d+")
kmer_comp2 <- str_extract(kmer_comp, "kmer_\\d+")
comp_df$kmer <- str_extract(kmer_comp2, "\\d+")
kc <- str_extract(kmer_comp, "kc_\\d+")
comp_df$kc <- str_extract(kc, "\\d+")
comp_df$FPR <- FPR[match(comp_df$kmer, kmer)]
comp_df$KmerGenieBest <- NA
comp_df$KmerGenieBest[comp_df$kmer %in% best_k] <- "Best K"
comp_df$Best_N50 <- NA
comp_df$Best_N50[which.max(comp_df$N50)] <- "Best N50"
comp_df <- comp_df[order(as.numeric(comp_df$kmer)),]
comp_df <- comp_df[,c(12:16,1:11)]
comp_df$KmerGenieBest
comp_df$Best_N50
### write out summary tsv
idx <- which(!is.na(comp_df$KmerGenieBest) & ! is.na(comp_df$Best_N50))
idx
View(comp_df)
### write out summary tsv
idx <- which(!is.na(comp_df$KmerGenieBest) | ! is.na(comp_df$Best_N50))
idx
View(comp_df)
scaffolds <- comp_df$name[idx]
scaffolds
library(stringr)
library(readr)
path <- "C:/Users/tva10kg/OneDrive - The Royal Botanic Gardens, Kew/Documents/Projects/PreliminaryGenomeAnal/Scripts/Docker/DockerRun/Output/RHW620_downsB/Trimmomatic_RHW620_downsB/Trimmomatic_hard"
output <- "C:/Users/tva10kg/OneDrive - The Royal Botanic Gardens, Kew/Documents/Projects/PreliminaryGenomeAnal/Scripts/Docker/DockerRun/Output/RHW620_downsB/Masurca_RHW620_downsB/Trimmomatic_hard_kmergenie"
threads <- 4
genom_size <- 981211
kmer_size <- "auto"
# calculate read length mean and sd
files <- list.files(path = path, pattern = "fastq.gz")
for(i in 1:length(files)){
system(paste0("gzip -d -k ", path, "/", files[i], " -c > ", output, "/read_", i, ".fastq"))
}
files2 <- list.files(path = output, pattern = "fastq")
files
output
path
for(i in 1:length(files)){
system(paste0("gzip -d -k ", path, "/", files[i], " -c > ", output, "/read_", i, ".fastq"))
}
readstat <- readLines(paste0(path, "Trimmomatic_hard_readstat.txt"))
readstat <- readLines(paste0(path, "/Trimmomatic_hard_readstat.txt"))
readstat
str_detect(readstat, "PairedRead")
readstat[str_detect(readstat, "PairedRead")]
str_extract(readstat[str_detect(readstat, "PairedRead")], "avg=\\d+")
str_extract(readstat[str_detect(readstat, "PairedRead")], "avg=\\d+.\\d+")
str_remove(str_extract(readstat[str_detect(readstat, "PairedRead")], "avg=\\d+.\\d+"), "avg=")
paired_mean <- str_remove(str_extract(readstat[str_detect(readstat, "PairedRead")], "avg=\\d+.\\d+"), "avg=")
str_remove(str_extract(readstat[str_detect(readstat, "PairedRead")], "stddev=\\d+.\\d+"), "stddev=")
paired_sd <- str_remove(str_extract(readstat[str_detect(readstat, "PairedRead")], "stddev=\\d+.\\d+"), "stddev=")
str_extract(readstat[str_detect(readstat, "SingleRead")], "avg=\\d+.\\d+")
readstat
single_idx <- 2:5
readstat_single <- readstat[single_idx,]
readstat_single <- readstat[single_idx]
readstat_single
str_split(readstat_single, " ")
sapply(str_split(readstat_single, " "), function(x) unlist(x))
sapply(str_split(readstat_single, " "), function(x) rbind(unlist(x)))
lapply(str_split(readstat_single, " "), function(x) unlist(x))
as.data.frame(do.call(rbind, str_split(readstat_single, " "), function(x) unlist(x)))
as.data.frame(do.call(rbind, str_split(readstat_single, " ")))
single_df <- as.data.frame(do.call(rbind, str_split(readstat_single, " ")))
str_detect(readstat, "PairedRead")
idx <- str_detect(readstat, "PairedRead")
paired_mean <- str_remove(str_extract(readstat[idx], "avg=\\d+.\\d+"), "avg=")
paired_sd <- str_remove(str_extract(readstat[idx], "stddev=\\d+.\\d+"), "stddev=")
readstat_single <- readstat[!idx]
single_df <- as.data.frame(do.call(rbind, str_split(readstat_single, " ")))
single_df
files
single_idx <- c(F,F,T,T)
input_single <- input_data[single_idx,]
str_extract(single_df[3,5], "\\d+.\\d+")
knitr::opts_chunk$set(echo = TRUE)
library(geiger)
path <- "/Users/tva10kg/The Royal Botanic Gardens, Kew/Darwin Tree of Life - HERICIUM/JosephaBecker/Genomics/Genomic_Pipeline_Reports/HerCora3/"
proteome_fasta <- "HerCora3.aa"
library(seqinr)
library(stringr)
prot <- read.fasta(paste0(path, "/", proteome_fasta), seqtype = "AA", forceDNAtolower = FALSE)
names(prot)[1]
names(prot)[100]
n <- names(prot)
n2 <- str_extract(n, "g\d+")
n2 <- str_extract(n, "g\\d+")
n2[1:5]
t <- str_extract(n, "t\\d+")
head(t)
head(n)
n3 <- str_extract(n2, "\\d+")
n3
new_name <- str_c("rbgk_", n3, "_", t)
head(new_name)
tail(new_name)
species <- "HerCora3"
new_name <- str_c("rbgk_", species, "_", n3, "_", t)
head(new_name)
tail(new_name)
prot_header <- data.frame(Oldnames = n, Newnames = new_name, stringsAsFactors = FALSE)
View(prot_header)
n3
prot_header <- data.frame(Transcript_old = n, Transcript_new = new_name, Gene_old = n2, Gene_new = new_gene, stringsAsFactors = FALSE)
new_gene <- str_c("rbgk_", species, "_", n3)
prot_header <- data.frame(Transcript_old = n, Transcript_new = new_name, Gene_old = n2, Gene_new = new_gene, stringsAsFactors = FALSE)
coding <- "HerCora3.codingseq"
coding <- read_file(paste0(path, "/", coding))
library(readr)
coding <- read_file(paste0(path, "/", coding))
head(coding)
coding <- read.fasta(paste0(path, "/", coding), seqtype = "DNA", forceDNAtolower = FALSE)
rm(coding)
coding <- read.fasta(paste0(path, "/", coding), seqtype = "DNA", forceDNAtolower = FALSE)
coding <- "HerCora3.codingseq"
coding <- read.fasta(paste0(path, "/", coding), seqtype = "DNA", forceDNAtolower = FALSE)
coding <- "HerCora3.codingseq"
coding_seq <- read.fasta(paste0(path, "/", coding), seqtype = "DNA", forceDNAtolower = FALSE)
all(names(coding_seq) == prot_header$Transcript_old)
all(names(prot) == prot_header$Transcript_old)
gtf <- "HerCora3.gtf"
gtf_file <- read_file(paste0(path, "/", gtf))
for(i in 1:nrow(prot_header)){
if(i %% 500){cat(i)}
gtf_file <- str_replace_all(gtf_file, paste0("\"", prot_header$Transcript_old[i], "\""),
paste0("\"", prot_header$Transcript_new[i], "\""))
}
write_file(gtf_file, paste0(path, "/gtf_test") )
prot <- read.fasta(paste0(path, "/", proteome_fasta), seqtype = "AA", forceDNAtolower = FALSE)
n <- names(prot)
n2 <- str_extract(n, "g\\d+")
t <- str_extract(n, "t\\d+")
n3 <- str_extract(n2, "\\d+")
new_name <- str_c("rbgk_", species, "_", n3, "_", t)
new_gene <- str_c("rbgk_", species, "_", n3)
prot_header <- data.frame(Transcript_old = n, Transcript_new = new_name, Gene_old = n2, Gene_new = new_gene, stringsAsFactors = FALSE)
if(all(names(prot) == prot_header$Transcript_old)){
write.fasta(prot, names = prot_header$Transcript_new, file.out = paste0(path, "/", species, "_renamed.aa"))
}
coding_seq <- read.fasta(paste0(path, "/", coding), seqtype = "DNA", forceDNAtolower = FALSE)
if(all(names(coding_seq) == prot_header$Transcript_old)){
write.fasta(coding_seq, names = prot_header$Transcript_new, file.out = paste0(path, "/", species, "_renamed.codingseq"))
}else{
cat("Coding seq headers are not matching")
}
gtf_file <- read_file(paste0(path, "/", gtf))
cat("Renaming gtf file has started:\nTranscript ID\n")
for(i in 1:nrow(prot_header)){
if(i %% 500 == 0){cat(i, "\n")}
gtf_file <- str_replace_all(gtf_file, paste0("\"", prot_header$Transcript_old[i], "\""),
paste0("\"", prot_header$Transcript_new[i], "\""))
}
cat("Renaming gtf file has started:\nGene ID\n")
for(i in 1:nrow(prot_header)){
if(i %% 500 == 0){cat(i, "\n")}
gtf_file <- str_replace_all(gtf_file, paste0("\"", prot_header$Gene_old[i], "\""),
paste0("\"", prot_header$Gene_new[i], "\""))
}
write_file(gtf_file, paste0(path, "/", species, "_renamed.gtf") )
prot <- read.fasta(paste0(path, "/", proteome_fasta), seqtype = "AA", forceDNAtolower = FALSE)
n <- names(prot)
n2 <- str_extract(n, "g\\d+")
t <- str_extract(n, "t\\d+")
n3 <- str_extract(n2, "\\d+")
new_name <- str_c("rbgk_", species, "_", n3, "_", t)
new_gene <- str_c("rbgk_", species, "_", n3)
prot_header <- data.frame(Transcript_old = n, Transcript_new = new_name, Gene_old = n2, Gene_new = new_gene, stringsAsFactors = FALSE)
if(all(names(prot) == prot_header$Transcript_old)){
write.fasta(prot, names = prot_header$Transcript_new, file.out = paste0(path, "/", species, "_renamed.aa"))
}
coding_seq <- read.fasta(paste0(path, "/", coding), seqtype = "DNA", forceDNAtolower = FALSE)
if(all(names(coding_seq) == prot_header$Transcript_old)){
write.fasta(coding_seq, names = prot_header$Transcript_new, file.out = paste0(path, "/", species, "_renamed.codingseq"))
}else{
cat("Coding seq headers are not matching")
}
gtf_file <- read_file(paste0(path, "/", gtf))
cat("Renaming gtf file has started:\nTranscript ID\n")
for(i in 1:nrow(prot_header)){
if(i %% 500 == 0){cat(i, "\n")}
gtf_file <- str_replace_all(gtf_file, paste0("\"", prot_header$Transcript_old[i], "\""),
paste0("\"", prot_header$Transcript_new[i], "\""))
gtf_file <- str_replace_all(gtf_file, paste0("\t", prot_header$Transcript_old[i], "\n"),
paste0("\t", prot_header$Transcript_new[i], "\n"))
}
cat("Renaming gtf file has started:\nGene ID\n")
for(i in 1:nrow(prot_header)){
if(i %% 500 == 0){cat(i, "\n")}
gtf_file <- str_replace_all(gtf_file, paste0("\"", prot_header$Gene_old[i], "\""),
paste0("\"", prot_header$Gene_new[i], "\""))
gtf_file <- str_replace_all(gtf_file, paste0("\t", prot_header$Gene_old[i], "\n"),
paste0("\t", prot_header$Gene_new[i], "\n"))
}
write_file(gtf_file, paste0(path, "/", species, "_renamed.gtf") )
